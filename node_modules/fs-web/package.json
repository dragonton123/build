{
  "_args": [
    [
      {
        "raw": "fs-web",
        "scope": null,
        "escapedName": "fs-web",
        "name": "fs-web",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/tadaomin/Project/reactwww"
    ]
  ],
  "_from": "fs-web@latest",
  "_id": "fs-web@1.0.1",
  "_inCache": true,
  "_location": "/fs-web",
  "_nodeVersion": "5.3.0",
  "_npmUser": {
    "name": "matthewp",
    "email": "matthew@matthewphillips.info"
  },
  "_npmVersion": "3.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs-web",
    "scope": null,
    "escapedName": "fs-web",
    "name": "fs-web",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/fs-web/-/fs-web-1.0.1.tgz",
  "_shasum": "5317e717af94db1687da82a48fc6ee4f808b121b",
  "_shrinkwrap": null,
  "_spec": "fs-web",
  "_where": "/home/tadaomin/Project/reactwww",
  "author": {
    "name": "Matthew Phillips"
  },
  "bugs": {
    "url": "https://github.com/matthewp/fs/issues"
  },
  "dependencies": {
    "path": "git://github.com/component/path.git#7b4f23c38833a5232cd5e3d50ccb8cd13dbcd2f4"
  },
  "description": "Node's fs, for the browser",
  "devDependencies": {
    "chai": "^3.4.1",
    "steal": "^0.12.7",
    "steal-mocha": "0.0.3",
    "steal-tools": "^0.12.3",
    "testee": "^0.2.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "5317e717af94db1687da82a48fc6ee4f808b121b",
    "tarball": "https://registry.npmjs.org/fs-web/-/fs-web-1.0.1.tgz"
  },
  "gitHead": "7d6003fa9e846fdf38d3bac040dfc22cc3379487",
  "homepage": "https://github.com/matthewp/fs#readme",
  "keywords": [
    "fs",
    "web"
  ],
  "license": "BSD-2-Clause",
  "main": "dist/cjs/fs.js",
  "maintainers": [
    {
      "name": "matthewp",
      "email": "matthew@matthewphillips.info"
    }
  ],
  "name": "fs-web",
  "optionalDependencies": {},
  "readme": "# fs-web\n\nBringing a file system abstraction to the browser. **fs** is a module that allows you to store data in the (modern) browser using an API similar to that of Node's [fs module](http://nodejs.org/api/fs.html)\n\nImplemented in a cross-browser fashion, using [IndexedDB](http://www.w3.org/TR/IndexedDB/).\n\n## Installation\n\nInstall via npm:\n\n```shell\nnpm install fs-web --save\n```\n\n## Example\n\nWriting from a file input.\n\n```javascript\nimport { writeFile } from 'fs-web';\n\nlet input = document.querySelector('input[type=\"file\"]'); \ninput.addEventListener('change', function(e) {\n  let file = this.files[0]; // file is a File object.\n\n  writeFile(file.name, file).then(function() {\n    // All done! File has been saved.\n  });\n});\n```\n\nWriting and reading.\n\n```js\nimport * as fs from 'fs-web';\n\nfs.writeFile('foo/some-file.txt', 'foo')\n  .then(function(){\n    return fs.readdir('foo');\n  })\n  .then(function(files){\n    files // -> [ {some-file.txt} ]\n  });\n```\n\n## API\n\nAll methods return a Promise.\n\n### fs.writeFile(fileName, data)\n\nSaves the file ``data`` with the name ``fileName`` and returns a Promise. If an error is encountered, the Promise will be rejected with an ``Error`` object.\n\n### fs.readFile(fileName)\n\nRetrieves the file with the name ``fileName`` and returns a Promise. The Promise will resolve with the file's data as an ``ArrayBuffer``.\n\n### fs.readString(fileName)\n\nRetrieves the file with the name ``fileName`` and returns a Promise. The Promise will resolve with a string representation of `fileName`.\n\n### fs.removeFile(fileName)\n\nRemoves the file with the name ``fileName`` from storage and returns a Promise. The Promise will resolve even if the fileName doesn't exist.\n\n### fs.readdir(fullPath)\n\nGets the contents of ``fullPath`` and returns a Promise. The Promise will resolve with an array of ``DirectoryEntry`` objects (see below).\n\n### fs.mkdir(fullPath)\n\nCreates a directory at ``fullPath`` and returns a Promise.\n\n### fs.rmdir(fullPath)\n\nRemoves the directory at ``fullPath``, recursively removing any files/subdirectories contained within. Returns a Promise that will resolve when the fullPath is removed.\n\n### DirectoryEntry\n\nA ``DirectoryEntry`` object is resolved from ``fs.readdir`` and represents either a **file** or a **directory**. A DirectoryEntry instance contains these properties/methods:\n\n### DirectoryEntry#path\n\nThe ``path`` property is the full path (including file name) for the given file/directory entry.\n\n### DirectoryEntry#name\n\nThe ``name`` of the given entry, either the file or directory name.\n\n### DirectoryEntry#dir\n\nThe given directory that the file/directory sits in.\n\n### DirectoryEntry#type\n\nThe ``type`` of the entry, either **file** or **directory**.\n\n### DirectoryEntry#readFile()\n\nA convenience method for calling ``readFile(fileName)``. Throws a TypeError if the entry is not of ``type`` **file**.\n\n## License\n\nBSD 2 Clause\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/matthewp/fs.git"
  },
  "scripts": {
    "build": "node build.js",
    "test": "DEBUG=testee:* testee test/index.html --browsers firefox --reporter Spec"
  },
  "system": {
    "main": "fs",
    "directories": {
      "lib": "lib"
    },
    "map": {
      "chai": "chai/chai"
    },
    "transpiler": "babel"
  },
  "version": "1.0.1"
}
