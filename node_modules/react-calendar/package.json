{
  "_args": [
    [
      {
        "raw": "react-calendar@^2.1.0",
        "scope": null,
        "escapedName": "react-calendar",
        "name": "react-calendar",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "/home/tadaomin/Project/reactwww/node_modules/react-date-picker"
    ]
  ],
  "_from": "react-calendar@>=2.1.0 <3.0.0",
  "_id": "react-calendar@2.1.0",
  "_inCache": true,
  "_location": "/react-calendar",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-calendar-2.1.0.tgz_1506847790198_0.2209118576720357"
  },
  "_npmUser": {
    "name": "wojtekmaj",
    "email": "kontakt@wojtekmaj.pl"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-calendar@^2.1.0",
    "scope": null,
    "escapedName": "react-calendar",
    "name": "react-calendar",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-date-picker"
  ],
  "_resolved": "https://registry.npmjs.org/react-calendar/-/react-calendar-2.1.0.tgz",
  "_shasum": "f5a56c008cef52022d21a92771cabe2bb065c15e",
  "_shrinkwrap": null,
  "_spec": "react-calendar@^2.1.0",
  "_where": "/home/tadaomin/Project/reactwww/node_modules/react-date-picker",
  "author": {
    "name": "Wojciech Maj",
    "email": "kontakt@wojtekmaj.pl"
  },
  "bugs": {
    "url": "https://github.com/wojtekmaj/react-calendar/issues"
  },
  "dependencies": {
    "lodash.once": "^4.1.1",
    "prop-types": ">=15.5",
    "react": ">=15.5",
    "react-dom": ">=15.5"
  },
  "description": "A component for picking dates or date periods for your React application.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.1",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "enzyme": "^3.0.0",
    "enzyme-adapter-react-16": "^1.0.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.1.0",
    "eslint-plugin-class-property": "^1.0.6",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^5.1.1",
    "eslint-plugin-react": "^7.4.0",
    "jest": "^21.2.1",
    "less": "^2.7.2",
    "react-test-renderer": "^16.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-zLF0sBroZNZZUBAb+YzAaPCiwULNW8++LT0po1Wtn94Z+EE3hUV1A8u7ma6yiP0SP2XNsIBtNuf+vHaZVOpyNA==",
    "shasum": "f5a56c008cef52022d21a92771cabe2bb065c15e",
    "tarball": "https://registry.npmjs.org/react-calendar/-/react-calendar-2.1.0.tgz"
  },
  "es6": "src/entry.js",
  "files": [
    "LICENSE",
    "README.md",
    "build/",
    "src/"
  ],
  "gitHead": "93cc92caf887ca6627378c056a4b9b6f303d1487",
  "homepage": "https://github.com/wojtekmaj/react-calendar#readme",
  "jest": {
    "collectCoverageFrom": [
      "**/src/**.{js,jsx}",
      "!**/src/entry.js"
    ]
  },
  "keywords": [
    "calendar",
    "date",
    "date-picker",
    "month-picker",
    "react"
  ],
  "license": "MIT",
  "main": "build/entry.js",
  "maintainers": [
    {
      "name": "wojtekmaj",
      "email": "kontakt@wojtekmaj.pl"
    },
    {
      "name": "anoobis",
      "email": "dev.jon.brito@gmail.com"
    },
    {
      "name": "freiksenet",
      "email": "freiksenet@gmail.com"
    }
  ],
  "name": "react-calendar",
  "optionalDependencies": {},
  "readme": "![downloads](https://img.shields.io/npm/dt/react-calendar.svg) ![build](https://img.shields.io/travis/wojtekmaj/react-calendar.svg) ![dependencies](https://img.shields.io/david/wojtekmaj/react-calendar.svg\r\n) ![dev dependencies](https://img.shields.io/david/dev/wojtekmaj/react-calendar.svg\r\n) [![tested with jest](https://img.shields.io/badge/tested_with-jest-99424f.svg)](https://github.com/facebook/jest)\r\n\r\n# React-Calendar\r\nUltimate date picker for your React application.\r\n\r\n## tl;dr\r\n* Install by executing `npm install react-calendar` or `yarn add react-calendar`.\r\n* Import by adding `import Calendar from 'react-calendar'`.\r\n* Use by adding `<Calendar />`. Use `onChange` prop for getting new values.\r\n\r\n## Demo\r\n\r\nMinimal demo page is included in sample directory.\r\n\r\n[Online demo](http://projekty.wojtekmaj.pl/react-calendar/) is also available!\r\n\r\n## Getting started\r\n\r\n### Compatibility\r\n\r\nReact-Calendar uses modern web technologies. That's why it's so fast, lightweight and easy to style. This, however, comes at a cost of supporting only modern browsers.\r\n\r\n|Browser|Minimum supported version|\r\n|----|----|\r\n|Google Chrome|24|\r\n|Mozilla Firefox|29|\r\n|Microsoft Edge|12|\r\n|Apple Safari|10|\r\n|Apple Safari (iOS)|10.2|\r\n|Opera|15|\r\n|Internet Explorer|11|\r\n|Samsung Internet|4|\r\n\r\n#### Legacy browsers\r\n\r\nIf you need to support legacy browsers like Internet Explorer 10, you will need to use [Intl.js](https://github.com/andyearnshaw/Intl.js/) or another Intl polyfill along with React-Calendar.\r\n\r\n### Installation\r\n\r\nAdd React-Calendar to your project by executing `npm install react-calendar` or `yarn add react-calendar`.\r\n\r\n### Usage\r\n\r\nHere's an example of basic usage:\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport Calendar from 'react-calendar';\r\n\r\nclass MyApp extends Component {\r\n  state = {\r\n    date: new Date(),\r\n  }\r\n\r\n  onChange = date => this.setState({ date })\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Calendar\r\n          onChange={this.onChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n### Custom styling\r\n\r\nIf you don't want to use default React-Calendar styling to build upon it, you can import React-Calendar by using `import Calendar from 'react-calendar/build/entry.nostyle';` instead.\r\n\r\n## User guide\r\n\r\n### Calendar\r\n\r\nDisplays a complete, interactive calendar.\r\n\r\n#### Props\r\n\r\n|Prop name|Description|Example values|\r\n|----|----|----|\r\n|calendarType|Defines which type of calendar should be used. Can be \"US\" or \"ISO 8601\". Defaults to \"US\" for \"en-US\" locale, \"ISO 8601\" to all the others.|`\"ISO 8601\"`|\r\n|locale|Defines which locale should be used by the calendar. Can be any BCP 47 language tag. Defaults to user's browser settings.|`\"hu-HU\"`|\r\n|maxDate|Defines maximum date that the user can select. Periods partially overlapped by maxDate will also be selectable, although react-calendar will ensure that no later date is selected.|Date: `new Date()`|\r\n|maxDetail|Defines the most detailed view that the user shall see. View defined here also becomes the one on which clicking an item will select a date and pass it to onChange. Can be \"month\", \"year\", \"decade\" or \"century\". Defaults to \"month\".|`\"month\"`|\r\n|minDate|Defines minimum date that the user can select. Periods partially overlapped by minDate will also be selectable, although react-calendar will ensure that no earlier date is selected.|Date: `new Date()`|\r\n|minDetail|Defines the least detailed view that the user shall see. Can be \"month\", \"year\", \"decade\" or \"century\". Defaults to \"century\".|`\"century\"`|\r\n|nextLabel|Defines the content of the \"next\" button on the navigation pane. Defaults to \"›\".|<ul><li>String: `\"›\"`</li><li>React element: `<NextIcon />`</li></ul>|\r\n|next2Label|Defines the content of the \"next on higher level\" button on the navigation pane. Defaults to \"»\". |<ul><li>String: `\"»\"`</li><li>React element: `<DoubleNextIcon />`</li></ul>|\r\n|onChange|Function called when the user clicks an item (day on month view, month on year view and so on) on the most detailed view available.|`(value) => alert('New date is: ', value)`|\r\n|onClickDay|Function called when the user clicks a day.|`(value) => alert('Clicked day: ', value)`|\r\n|onClickDecade|Function called when the user clicks a decade.|`(value) => alert('Clicked decade: ', value)`|\r\n|onClickMonth|Function called when the user clicks a month.|`(value) => alert('Clicked month: ', value)`|\r\n|onClickYear|Function called when the user clicks a year.|`(value) => alert('Clicked year: ', value)`|\r\n|prevLabel|Defines the content of the \"previous\" button on the navigation pane. Defaults to \"‹\".|<ul><li>String: `\"‹\"`</li><li>React element: `<PrevousIcon />`</li></ul>|\r\n|prev2Label|Defines the content of the \"previous on higher level\" button on the navigation pane. Defaults to \"«\".|<ul><li>String: `\"«\"`</li><li>React element: `<DoublePreviousIcon />`</li></ul>|\r\n|renderChildren|Allows to render custom content within a given item (day on month view, month on year view and so on).|`({ date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null`|\r\n|returnValue|Defines which dates shall be passed by the calendar to the onChange function and onClick{Period} functions. Can be \"start\", \"end\"  or \"range\". The latter will cause an array with start and end values to be passed. Defaults to \"start\".|`\"range\"`|\r\n|showNavigation|Defines whether a navigation bar with arrows and title shall be rendered. Defaults to true.|`false`|\r\n|showNeighboringMonth|Defines whether days from previous or next month shall be rendered if the month doesn't start on the first day of the week or doesn't end on the last day of the week, respectively. Defaults to true.|`false`|\r\n|showWeekNumbers|Defines whether week numbers shall be shown at the left of MonthView or not. Defaults to false.|`true`|\r\n|value|Defines the value of the calendar.|<ul><li>Date: `new Date()`</li><li>An array of dates: `[new Date(2017, 0, 1), new Date(2017, 7, 1)]`|\r\n|view|Determines which calendar view shall be opened initially. Does not disable navigation. Can be \"month\", \"year\", \"decade\" or \"century\". Defaults to the most detailed view allowed.|`\"year\"`|\r\n\r\n### MonthView, YearView, DecadeView, CenturyView\r\n\r\nDisplays a given month, year, decade and a century, respecitvely.\r\n\r\n#### Props\r\n\r\n|Prop name|Description|Example values|\r\n|----|----|----|\r\n|activeStartDate|The beginning of a period that shall be displayed.|`new Date(2017, 0, 1)`|\r\n|maxDate|Defines maximum date that the user can select. Periods partially overlapped by maxDate will also be selectable, although react-calendar will ensure that no later date is selected.|Date: `new Date()`|\r\n|minDate|Defines minimum date that the user can select. Periods partially overlapped by minDate will also be selectable, although react-calendar will ensure that no earlier date is selected.|Date: `new Date()`|\r\n|onClick|Function called when the user clicks an item (day on month view, month on year view and so on).|`(value) => alert('New date is: ', value)`|\r\n|renderChildren|Allows to render custom content within a given item (day on month view, month on year view and so on). Note: For tiles with custom content you might want to set fixed height of `react-calendar__tile` to ensure consistent layout.|`({ date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null`|\r\n|value|Defines the value of the calendar.|<ul><li>Date: `new Date()`</li><li>An array of dates: `[new Date(2017, 0, 1), new Date(2017, 7, 1)]`|\r\n\r\n## License\r\n\r\nThe MIT License.\r\n\r\n## Author\r\n\r\n<table>\r\n  <tr>\r\n    <td>\r\n      <img src=\"https://github.com/wojtekmaj.png?s=100\" width=\"100\">\r\n    </td>\r\n    <td>\r\n      Wojciech Maj<br />\r\n      <a href=\"mailto:kontakt@wojtekmaj.pl\">kontakt@wojtekmaj.pl</a><br />\r\n      <a href=\"http://wojtekmaj.pl\">http://wojtekmaj.pl</a>\r\n    </td>\r\n  </tr>\r\n</table>\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wojtekmaj/react-calendar.git"
  },
  "scripts": {
    "build": "npm run build-js && npm run build-styles && npm run copy-styles",
    "build-js": "babel src -d build --ignore **/__tests__",
    "build-styles": "lessc ./src/Calendar.less ./src/Calendar.css",
    "copy-styles": "node ./copy-styles.js",
    "prepublishOnly": "npm run build",
    "test": "npm run test-eslint && npm run test-jest",
    "test-eslint": "eslint ./src",
    "test-jest": "jest",
    "test-jest-coverage": "jest --coverage"
  },
  "version": "2.1.0"
}
